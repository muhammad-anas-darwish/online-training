<?php

namespace {{ namespace }};

use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use {{ modelNamespace }};
use {{ dtoNamespace }};

class {{ class }}
{
    private const CACHE_PREFIX = '{{ cachePrefix }}';
    private const CACHE_TTL = 86400; // 1 day

    public function all(): LengthAwarePaginator
    {
        $page = request()->get('page', 1);
        $perPage = request()->get('per_page', 15);
        $cacheKey = $this->getPaginatedCacheKey($page, $perPage);

        return Cache::remember($cacheKey, self::CACHE_TTL, function () use ($perPage) {
            return {{ model }}::query()->paginate($perPage);
        });
    }

    public function find($id): {{ model }}
    {
        $cacheKey = $this->getItemCacheKey($id);
        
        return Cache::remember($cacheKey, self::CACHE_TTL, function () use ($id) {
            return {{ model }}::findOrFail($id);
        });
    }

    public function store({{ model }}DTO $dto): {{ model }}
    {
        return DB::transaction(function () use ($dto): {{ model }} {
            ${{ modelVariable }} = {{ model }}::create([
                // Add your fields here
            ]);

            $this->clearCache();
            return ${{ modelVariable }};
        });
    }

    public function update({{ model }} ${{ modelVariable }}, {{ model }}DTO $dto): {{ model }}
    {
        return DB::transaction(function () use (${{ modelVariable }}, $dto): {{ model }} {
            ${{ modelVariable }}->update([
                // Add your fields here
            ]);

            $this->clearItemCache(${{ modelVariable }}->id);
            $this->clearPaginatedCache();
            return ${{ modelVariable }}->fresh();
        });
    }

    public function destroy({{ model }} ${{ modelVariable }}): void
    {
        DB::transaction(function () use (${{ modelVariable }}): void {
            ${{ modelVariable }}->delete();

            $this->clearItemCache(${{ modelVariable }}->id);
            $this->clearPaginatedCache();
        });
    }

    private function getItemCacheKey($id): string
    {
        return self::CACHE_PREFIX . ".{$id}";
    }

    private function getPaginatedCacheKey($page, $perPage): string
    {
        return self::CACHE_PREFIX . ".page.{$page}.per_page.{$perPage}";
    }

    private function clearItemCache($id): void
    {
        Cache::forget($this->getItemCacheKey($id));
    }

    private function clearPaginatedCache(): void
    {
        Cache::tags([self::CACHE_PREFIX . '_pages'])->flush();
    }

    private function clearCache(): void
    {
        $this->clearPaginatedCache();
    }
}